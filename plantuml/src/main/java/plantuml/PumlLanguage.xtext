grammar plantuml.Puml /*with org.eclipse.xtext.common.Terminals*/ hidden(WS, NEWLINE, SL_COMMENT, ML_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate puml "http://www.eclipse.plantuml/Puml"

// Sequence diagram
SequenceDiagram:
	{SequenceDiagram}
	'SEQUENCE'? '@startuml' umlElements+=(SequenceElement)* '@enduml';

SequenceElement:
	Lifeline
	| Message
	| Skinparam
	| Box
	| Group
	| Activate
	| Alternative
	| Autonumber
	| Legend
	| Title
	| Newpage
	| Note
	| Divider
	| Reference
	| Delay
	| Space;

Lifeline:
    Participant | Actor;

Participant returns Lifeline:
	{Participant}
	('PARTICIPANT') (name=PUMLID | longname=(STRING | PUMLID) 'AS'
	name=PUMLID);

Actor returns Lifeline:
	{Actor}
	('ACTOR') (name=PUMLID | longname=(STRING | PUMLID) 'AS'
	name=PUMLID);

// TODO: restrict arrows (problem: hexcode can be anywhere)
terminal RIGHTARROW:
	'-' ('-' | '>' | '[' HEXCODE ']')*;

terminal LEFTARROW:
	'<' ('-' | '<' | '[' HEXCODE ']')*;

Message:
	{Message}
	((sink=[Lifeline|PUMLID] associationArrow=LEFTARROW source=[Lifeline|PUMLID])
	| (source=[Lifeline|PUMLID] associationArrow=RIGHTARROW sink=[Lifeline|PUMLID]))
	(':' (content=RequestResponse | text+=(PUMLID)*))?;

RequestResponse:
    Request | Response;

terminal RequestMethod:
    'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';

Request returns RequestResponse:
    {Request}
    method=RequestMethod url=STRING ('(' requestParam+=RequestParam (',' requestParam+=RequestParam)* ')')?;

Response returns RequestResponse:
    {Response}
    code+=INT (',' code+=INT)* ('-' ('(' responseParam+=ResponseParam (',' responseParam+=ResponseParam)* ')')? ('[' postcondition=STRING ']')? )?;

RequestParam:
    {RequestParam}
    name=PUMLID ':' value=STRING;

ResponseParam:
    {ResponseParam}
    name=PUMLID ':=' value=STRING;

Space:
	{Space}
	('||' value=PUMLID '||' | '|||');

Delay:
	{Delay}
	'...' value+=(PUMLID)* '...';

Reference:
	{Reference}
	'REF OVER' ref+=[Lifeline|PUMLID] (',' ref+=[Lifeline|PUMLID])*
	(':' value+=(PUMLID)* | value+=(PUMLID)* 'END REF');

Divider:
	{Divider}
	'==' name=PUMLID value+=(PUMLID)* '==';

Note:
	{Note}
	'NOTE' ('LEFT OF' | 'RIGHT OF' | 'OVER') (noteOf=[Lifeline|PUMLID])? ':'?
	value+=(PUMLID)*
	'END NOTE';

Newpage:
	{Newpage}
	'NEWPAGE' value+=(PUMLID | STRING)*;

Title:
	{Title}
	'TITLE' value+=(PUMLID | STRING | WS)*;

Legend:
	{Legend}
	'LEGEND'
	legendEntries+=(STRING | PUMLID | '=' | ':')*
	'ENDLEGEND';

LegendEntries:
	name=PUMLID '=' value+=(PUMLID | STRING)*;

Autonumber:
	{Autonumber}
	'AUTONUMBER' (value=(PUMLID | STRING))?;

Activate returns UmlElementsContainer:
	{Activate}
	'ACTIVATE' activate=[Lifeline|PUMLID]
	umlElements+=(SequenceElement)*
	('DEACTIVATE' | 'DESTROY') deactivate=[Lifeline|PUMLID];

Alternative returns UmlElementsContainer:
	{Alternative}
	'ALT' text=STRING
	umlElements+=(SequenceElement)*
	elseBlocks+=(Else)*
	=> 'END';

Else returns UmlElementsContainer:
	{Else}
	'ELSE' text=STRING
	umlElements+=(SequenceElement)*;

Group returns UmlElementsContainer:
	{Group}
	('GROUP') test+=(PUMLID)*
	umlElements+=(SequenceElement)*
	=> 'END';

Box returns UmlElementsContainer:
	{Box}
	'BOX' name=STRING (color=HEXCODE)?
	umlElements+=(SequenceElement)*
	=> 'END BOX';

Skinparam:
	{Skinparam}
	'SKINPARAM SEQUENCE{'
	skinElements+=(SkinElement)*
	'}';

SkinElement:
	name=PUMLID value=(PUMLID | HEXCODE);

UmlElementsContainer:
	{UmlElementsContainer}
	umlElements+=(SequenceElement)*;

// Hexadecimal colors
terminal HEXCODE:
	"#"
	('A' .. 'F'|'0' .. '9')('A' .. 'F'|'0' .. '9')('A' .. 'F'|'0' .. '9')
	('A' .. 'F'|'0' .. '9')('A' .. 'F'|'0' .. '9')('A' .. 'F'|'0' .. '9');

// Integer
terminal INT returns ecore::EInt:
	'0'..'9'+;

// String
terminal STRING:
	'"' ('\\' . | !('\\' | '"'))* '"';

// Tab
terminal WS:
	' ' | '\t';

// Newline
terminal NEWLINE:
	'\r'? '\n';

// ID
terminal PUMLID:
	('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '\"\"' | '//' | '\\' | '*' | '?')
	('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '\"\"' | '//' | '\\' | ':' | '*' | '?')*;

// Single line comment
terminal SL_COMMENT:
	"'" !('\n' | '\r')* ('\r'? '\n')?;

// TODO: Does it work?
// Multiline comments
terminal ML_COMMENT:
	"/'" !("'/")* "'/" ;
