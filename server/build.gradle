buildscript {
    ext.kotlin_version = "1.3.21" // Required for Kotlin integration
    repositories {
        jcenter()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version" // Required for Kotlin integration
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version" // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.19"
    }
}

apply plugin: "java"
apply plugin: "kotlin" // Required for Kotlin integration
apply plugin: "application"

mainClassName = "de.unia.se.plantestic.server.ServerMain"
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jar {
    baseName = "se13-plantestic-team"
    version = "0.1.0"
    manifest {
        attributes "Main-Class": "de.unia.se.plantestic.server.ServerMain"
    }
}

sourceSets{
    main.java.srcDirs += "src/main/kotlin/"
}

repositories {
    jcenter()
    google()
    mavenCentral()
}

configurations {
    ktlint
}

/*
task runWithExec(type: Exec) {
    dependsOn build
    group = "Execution"
    description = "Run the main class with ExecTask"
    commandLine "docker run -d -p 4000:8080 plantuml/plantuml-server:jetty"
    commandLine "java", "-classpath", sourceSets.main.runtimeClasspath.getAsPath(), "de.unia.se.plantestic.TestMain"
}*/

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation project(":frontend")
    implementation ("io.ktor:ktor-server-core:1.3.2")
    implementation ("io.ktor:ktor-server-netty:1.3.2")

    ktlint "com.github.shyiko:ktlint:0.29.0"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    // To generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
}

// To run ktlint during the build (and fail when appropriate)
check.dependsOn ktlint
