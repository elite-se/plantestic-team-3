modeltype puml "strict" uses puml('http://www.eclipse.plantuml/Puml');

configuration property tester : String;

transformation puml2puml(in input: puml, out output: puml);

main() {
    log('Started extracting Tester from PlantUML');

     input.objectsOfType(SequenceDiagram).map extractTester();
}

mapping SequenceDiagram::extractTester(): SequenceDiagram {
    var tester_in : Participant := self.umlElements -> getTester();
    assert fatal ( tester_in != null )
        with log ( 'Sequence diagram needs a tester');

    var tester_out : Participant := new Participant();
    tester_out.name := "Tester";

    var redirectedElements := self.umlElements->filterAndRedirectMessages(tester_in, tester_out);
    umlElements += tester_out;
    tester_out.isExpectingResponse := false;
    umlElements += redirectedElements ->filterAndChangeIncomingRequests(tester_out, tester_in);
}

intermediate property Participant::isExpectingResponse : Boolean;

helper OrderedSet(SequenceElement)::filterAndRedirectMessages( in tester_in : Participant, in tester_out : Participant)
        : OrderedSet(SequenceElement) {
    var ret : OrderedSet(SequenceElement);
    self->forEach(sequenceElement) {
        if (sequenceElement.oclIsTypeOf(Message)){
            var message : Message := sequenceElement.oclAsType(Message);

            //Should we consider self-messages?
            if (message.source = tester_in and message.sink = tester_in){
                if (message.content.oclIsKindOf(Request)) {
                    message.source := tester_out;
                }
                elif (message.content.oclIsKindOf(Response)) {
                    message.sink := tester_out;
                };
                ret += message;
            }
            elif (message.source = tester_in){
                message.source := tester_out;
                ret += message;
            }
            elif (message.sink = tester_in){
                message.sink := tester_out;
                ret += message;
            };
        }
        elif (sequenceElement.oclIsKindOf(Alternative)){
            var altElement : Alternative := sequenceElement.oclAsType(Alternative);
            var altChangeList : OrderedSet(SequenceElement) :=
                altElement.umlElements->filterAndRedirectMessages(tester_in, tester_out);
            altElement.elseBlocks->forEach(elseBlock) {
                elseBlock.umlElements := elseBlock.umlElements->filterAndRedirectMessages(tester_in, tester_out);
            };
            altElement.elseBlocks := altElement.elseBlocks->select(elseBlock | elseBlock.umlElements->size() > 0);
            altElement.umlElements := altChangeList;
            if (altElement.umlElements->size() > 0 or altElement.elseBlocks->size() > 0) {
                ret += altElement;
            }

        }
        elif (sequenceElement.oclIsKindOf(UmlElementsContainer)){
            var containerChangeList : OrderedSet(SequenceElement) :=
                sequenceElement.oclAsType(UmlElementsContainer).umlElements->filterAndRedirectMessages(tester_in, tester_out);
            if (containerChangeList->size() > 0) {
                ret += containerChangeList;
            }
        }
        else {
            ret += sequenceElement;
        };
    };
    return ret;
}

helper OrderedSet(SequenceElement)::filterAndChangeIncomingRequests(in tester : Participant, in prev_tester : Participant) : OrderedSet(SequenceElement) {

    var ret : OrderedSet(SequenceElement);
    self->forEach(sequenceElement){
        if (sequenceElement.oclIsTypeOf(Message)) {
            var message : Message := sequenceElement.oclAsType(Message);
            log("Message", message.content);
            log("Before if", tester.isExpectingResponse);
            if (message.content.oclIsKindOf(Response) and message.source = tester) {
                if (tester.isExpectingResponse) {
                    var response_message := message.mapTesterOutgoingToTesterIncoming(tester, prev_tester);
                    ret += response_message;
                    tester.isExpectingResponse := false;
                    log("Expecting Response set to", tester.isExpectingResponse);
                } else {
                    log("Found response from tester even though none is expected. Skipping");
                };
            }
            elif (message.sink = tester and message.content.oclIsKindOf(Request)) {
                var msg_request : Request := message.content.oclAsType(Request);

                if(msg_request.method = 'POST' or msg_request.method = 'PUT'
                    or msg_request.method = 'PATCH') {
                        var get_message := message.mapTesterIncomingToTesterOutgoing(tester, prev_tester);
                        ret += get_message;
                        ret += new Note(tester, msg_request, message.source, prev_tester);
                        tester.isExpectingResponse := true;
                        log("Stub message detected. Expecting Response set to", tester.isExpectingResponse);
                    };
            }
            else {
                ret += message;
            }
        }
        elif (sequenceElement.oclIsKindOf(Alternative)){
            var altElement : Alternative := sequenceElement.oclAsType(Alternative);
            altElement.elseBlocks->forEach(elseBlock) {
                var copyTester := tester.clone().oclAsType(Participant);
                elseBlock.umlElements := elseBlock.umlElements->filterAndChangeIncomingRequests(copyTester, prev_tester);
            };
            var altChangeList : OrderedSet(SequenceElement) :=
                altElement.umlElements->filterAndChangeIncomingRequests(tester, prev_tester);

            altElement.umlElements := altChangeList;
            altElement.elseBlocks := altElement.elseBlocks->select(elseBlock | elseBlock.umlElements->size() > 0);
            altElement.umlElements := altChangeList;
            if (altElement.umlElements->size() > 0 or altElement.elseBlocks->size() > 0) {
                ret += altElement;
            };

        }
        elif (sequenceElement.oclIsKindOf(UmlElementsContainer)){
            var containerChangeList : OrderedSet(SequenceElement) :=
                sequenceElement.oclAsType(UmlElementsContainer).umlElements->filterAndChangeIncomingRequests(tester, prev_tester);
            if (containerChangeList->size() > 0) {
                ret += containerChangeList;
            }
        }
        else {
            ret += sequenceElement;
        };
    };
    return ret;

}

mapping Message::mapTesterIncomingToTesterOutgoing(in tester : Participant, in prev_tester : Participant) : Message {
    init {
        result := self;
    }
    result.sink := prev_tester;
    result.source := tester;
    var newRequest := new Request();
    newRequest.method := 'STUB';
    newRequest.waitingTime := 2000;
    result.content := newRequest;
}

mapping Message::mapTesterOutgoingToTesterIncoming(in tester : Participant, in prev_tester : Participant) : Message {
    result.sink := tester;
    result.source := prev_tester;
    result.content := new Response();
}

constructor Note::Note(noteOfIn : Participant, request : Request, og_source : Participant, og_sink : Participant) {
    position := 'LEFT';
    noteOf := noteOfIn;
    value += 'Stub pair for incoming asynchronous messages.';
    value += 'Corresponds to ' + request.method + ' request between ' + og_source.name + ' and ' + og_sink.name;
}

helper OrderedSet(SequenceElement)::getTester(): Participant {
    self->forEach(sequenceElement) {
        if (sequenceElement.oclIsTypeOf(Participant)) {
            var participant : Participant := sequenceElement.oclAsType(Participant);
            if (participant.name = tester or participant.longname = tester){
                return participant;
            }
        }
        elif (sequenceElement.oclIsKindOf(UmlElementsContainer)) {
            var tester : Participant := sequenceElement.oclAsType(UmlElementsContainer).umlElements->getTester();
            if (tester <> null) {
                return tester;
            };
        };
    };
    return null;
}
