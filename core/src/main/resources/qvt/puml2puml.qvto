modeltype puml "strict" uses puml('http://www.eclipse.plantuml/Puml');

configuration property tester : String;

transformation puml2puml(in input: puml, out output: puml);

main() {
    log('Started extracting Tester from PlantUML');

     input.objectsOfType(SequenceDiagram).map extractTester();
}

mapping SequenceDiagram::extractTester(): SequenceDiagram {
    var tester_in : Participant := self.umlElements -> getTester();
    assert fatal ( tester_in != null )
        with log ( 'Sequence diagram needs a tester');

    var tester_out : Participant := new Participant();
    tester_out.name := "Tester";

    umlElements += tester_out;
    umlElements += self.umlElements->filterAndChangeMessages(tester_in, tester_out);
}

helper OrderedSet(SequenceElement)::filterAndChangeMessages( in tester_in : Participant, in tester_out : Participant) : OrderedSet(SequenceElement) {
    var ret : OrderedSet(SequenceElement);
    self->forEach(sequenceElement) {
        if (sequenceElement.oclIsTypeOf(Message)){
            var message : Message := sequenceElement.oclAsType(Message);
            if (message.sink = tester_in and message.content.oclIsKindOf(Response)){
                message.sink := tester_out;
                ret += message;
            }
            elif (message.source = tester_in){
                message.source := tester_out;
                ret += message;
            }
        }
        elif (sequenceElement.oclIsKindOf(UmlElementsContainer)){
            var containerChangeList : OrderedSet(SequenceElement) :=
                sequenceElement.oclAsType(UmlElementsContainer).umlElements->filterAndChangeMessages(tester_in, tester_out);
            if (containerChangeList->size() > 0) {
                ret += containerChangeList;
            }
        }
        else {
            ret += sequenceElement;
        }
    };
    return ret;
}

helper OrderedSet(SequenceElement)::getTester(): Participant {
    self->forEach(sequenceElement) {
        if (sequenceElement.oclIsTypeOf(Participant)) {
            var participant : Participant := sequenceElement.oclAsType(Participant);
            if (participant.name = tester or participant.longname = tester){
                return participant;
            }
        }
        elif (sequenceElement.oclIsKindOf(UmlElementsContainer)) {
            var tester : Participant := sequenceElement.oclAsType(UmlElementsContainer).umlElements->getTester();
            if (tester <> null) {
                return tester;
            };
        };
    };
    return null;
}
