swagger: "2.0"
info:
  description: "This is a swagger definition for the plantestic test diagrams"
  version: "1.0.0"
  title: "Plantestic Team03 Test"
paths:

  /testA:
    get:
      tags:
        - "stub_get_tester"
      responses:
        "400":
          description: "error occurred"

  /testA/bye:
    get:
      tags:
        - "complex_tester"
      responses:
        "400":
          description: "error"

  /testA/STUB:
    get:
      tags:
        - "complex_tester"
      responses:
        "400":
          description: "error"

  /testB/asynccall/{id}:
    get:
      tags:
        - "demo"
      parameters:
        - in: "path"
          name: "id"
          type: "integer"
          required: true
        - in: "query"
          name: "varX"
          type: "string"
          required: true
        - in: "query"
          name: "varY"
          type: "string"
          required: true
      responses:
        "200":
          description: "success"
          schema:
            type: "object"
            required:
              - "a"
            properties:
              a:
                type: "string"
                example: "Hello World!"

  /testB/hello:
    get:
      tags:
        - "minimal_hello"
      responses:
        "200":
          description: "success"

    post:
      tags:
        - "complex_tester"
      responses:
        "200":
          description: "success"

  /testB/hello/{id}:
    get:
      tags:
        - "tester"
      parameters:
        - in: "query"
          name: "testQuery"
          type: "string"
          required: true
        - in: "path"
          name: "id"
          type: "integer"
          required: true
      responses:
        "200":
          description: "success"
    post:
      tags:
        - "complex_hello"
      consumes:
        - application/json
      parameters:
        - in: "path"
          name: "id"
          type: "integer"
          required: true
        - name: "body"
          in: "body"
          required: true
          schema:
            # Body schema with atomic property examples
            type: "object"
            required:
              - varA
              - varB
            properties:
              varA:
                type: "string"
              varB:
                type: "string"
      responses:
        "200":
          description: "success"
          schema:
            type: "object"
            properties:
              itemA:
                type: "integer"
                example: 1
              itemB:
                type: "integer"
                example: 2
            required:
              - itemA
              - itemB

  /testC/bye:
    get:
      tags:
        - "tester_out"
      responses:
        "200":
          description: "success"

  /testC/synccall:
    get:
      tags:
        - "demo"
      responses:
        "200":
          description: "success"
          schema:
            type: "object"
            required:
              - "result"
            properties:
              result:
                type: "string"
                example: "success"

  /testD/important/info:
    post:
      tags:
        - "demo"
      consumes:
        - application/json
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            # Body schema with atomic property examples
            type: "object"
            required:
              - name
            properties:
              name:
                type: "string"
      responses:
        "200":
          description: "success"

  /CRS/ccc/rerouteOptions:
    post:
      tags:
        - "rerouting"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            required:
              - countryCode
              - positionCountryCode
              - sourceEventType
            properties:
              countryCode:
                type: "string"
              positionCountryCode:
                type: "string"
              sourceEventType:
                type: "string"
      responses:
        "200":
          description: "success"
          schema:
            type: "object"
            properties:
              uiswitch:
                type: "string"
                example: "/UISWITCH"
              reroute:
                type: "string"
                example: "/REROUTE"
              warmhandover:
                type: "string"
                example: "/WARMHANDOVER"

  /Voicemanager/ccc/events/{eventId}/isconnected:
    get:
      tags:
        - "rerouting"
      parameters:
        - name: "eventId"
          in: "path"
          description: "An event id"
          required: true
          type: "number"
      responses:
        "200":
          description: "success"
          schema:
            type: "object"
            required:
              - "VoiceStatus"
            properties:
              VoiceStatus:
                type: "object"
                required:
                  - "eventId1"
                  - "agent1"
                  - "agent2"
                properties:
                  eventId1:
                    type: "number"
                  agent1:
                    type: "object"
                    properties:
                      connectionStatus:
                        type: "string"
                  agent2:
                    type: "object"
                    properties:
                      connectionStatus:
                        type: "string"
        "400":
          description: "failure"
        "404":
          description: "failure"
        "500":
          description: "failure"

  /DataService/vehicle/internal/{vin}:
    get:
      tags:
        - "x_call"
      parameters:
        - name: "vin"
          in: "path"
          required: true
          type: "number"
      responses:
        "200":
          description: "success"
          schema:
            type: "object"
            properties:
              homeCountry:
                type: "string"
              positionCountry:
                type: "string"
              brand:
                type: "string"

  /CRS/routingTargets/find:
    post:
      tags:
        - "x_call"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            required:
              - eventId
              - serviceType
              - vin
              - homeCountry
              - positionCountry
              - brand
            properties:
              eventId:
                type: "number"
              serviceType:
                type: "string"
              vin:
                type: "number"
              homeCountry:
                type: "string"
              positionCountry:
                type: "string"
              brand:
                type: "string"
      responses:
        "200":
          description: "success"
          schema:
            type: "object"
            properties:
              voiceTargets:
                type: "string"

  /EventNotifier/xcs/notify/{eventId}:
    put:
      tags:
        - "x_call"
      consumes:
        - application/x-www-form-encoded
      parameters:
        - name: "eventId"
          in: "path"
          description: "An event id"
          required: true
          type: "number"
        #       Query parameters ignored in validation
        - in: "query"
          name: "homeCountry"
          required: true
          type: "string"
        - in: "query"
          name: "positionCountry"
          required: true
          type: "string"
        - in: "query"
          name: "brand"
          required: true
          type: "string"
      responses:
        "200":
          description: "success"

  /ELOS/xcs/notify/{eventId}:
    put:
      tags:
        - "x_call"
      parameters:
        - in: "path"
          name: "eventId"
          required: true
          type: "number"
        #       Query parameters ignored in validation
        - in: "query"
          name: "homeCountry"
          required: true
          type: "string"
        - in: "query"
          name: "positionCountry"
          required: true
          type: "string"
        - in: "query"
          name: "brand"
          required: true
          type: "string"
      responses:
        "200":
          description: "success"

  /CCC/xcs/eventReceived:
    post:
      tags:
        - "x_call"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            required:
              - eventId
              - serviceType
              - homeCountry
              - positionCountry
              - brand
            properties:
              eventId:
                type: "number"
              serviceType:
                type: "string"
              homeCountry:
                type: "string"
              positionCountry:
                type: "string"
              brand:
                type: "string"
      responses:
        "200":
          description: "success"

  /Voicemanager/setupCall:
    post:
      tags:
        - "x_call"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            required:
              - eventId
              - vin
              - voiceTargets
            properties:
              eventId:
                type: "number"
              vin:
                type: "number"
              voiceTargets:
                type: "string"
      responses:
        "200":
          description: "success"

  /Person/getAge:
    get:
      tags:
        - "parameter_pass"
      responses:
        "200":
          description: "success"
          schema:
            $ref: "#/definitions/Age"

  /Person/checkAge:
    post:
      tags:
        - "parameter_pass"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Age"
      responses:
        "200":
          description: "success"

definitions:
  Age:
    type: "object"
    required:
      - "years"
    properties:
      age:
        type: "integer"
